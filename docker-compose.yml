services:
  psql:
    container_name: psql
    image: postgres:16
    environment:
      POSTGRES_DB: "products"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "root"
      PGPASSWORD: "root"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - ./psql:/var/lib/postgresql/data

  migrate:
    image: migrate/migrate
    depends_on:
      psql:
        condition: service_healthy
    volumes:
      - ./products/db/migrations:/migrations
    command: -path /migrations -database "postgres://postgres:root@psql:5432/products?sslmode=disable" up
  notifications:
    build:
      context: ./notifications
      dockerfile: .dockerfile
    container_name: notifications
    depends_on:
      migrate:
        condition: service_completed_successfully
      broker:
        condition: service_healthy
      topic-init:
        condition: service_completed_successfully
    environment:
      MESSAGE_BROKER_ENDPOINT: broker:9092
      MESSAGE_BROKER_TOPIC: product-events
      CONSUMER_GROUP_ID: notifications-service
  product:
    build:
      context: ./products
      dockerfile: .dockerfile
    container_name: products
    depends_on:
      migrate:
        condition: service_completed_successfully
      broker:
        condition: service_healthy
      topic-init:
        condition: service_completed_successfully
    ports:
      - "8081:8081"
    environment:
      HTTP_PORT: 8081
      DB_HOST: psql
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: root
      DB_NAME: products
      DB_SSL_MODE: disable
      MESSAGE_BROKER_ENDPOINT: broker:9092
      MESSAGE_BROKER_TOPIC: product-events
      MESSAGE_BROKER_CLIENT_ID: product-service
  prometheus:
    image: prom/prometheus
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090

  topic-init:
    image: apache/kafka:latest
    depends_on:
      broker: { condition: service_healthy }
    # entrypoint: ["/bin/sh", "-c"]
    command: /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:9092 --create --if-not-exists --topic product-events --partitions 3 --replication-factor 1

  broker:
    container_name: broker
    image: apache/kafka:latest
    ports:
      - 9092:9092
      - 9094:9094
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9094,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: /opt/kafka/bin/kafka-topics.sh --bootstrap-server broker:9092 --list  || exit 1
      interval: 5s
      timeout: 20s
      retries: 10

volumes:
  psql:
